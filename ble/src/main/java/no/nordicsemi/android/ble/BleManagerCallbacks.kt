/*
 * Copyright (c) 2018, Nordic Semiconductor
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package no.nordicsemi.android.ble

import android.bluetooth.BluetoothDevice
import android.bluetooth.BluetoothGatt
import android.bluetooth.BluetoothGattCallback

import androidx.annotation.IntRange

// DO NOT EDIT THIS FILE UNLESS NECESSARY!

/**
 * The BleManagerCallbacks should be overridden in your app and all the 'high level' callbacks
 * should be added there. See examples in Android nRF Blinky or Android nRF Toolbox.
 *
 *
 * Keeping this file as is (and [BleManager] as well) will allow to quickly update it when
 * an update is posted here.
 */
interface BleManagerCallbacks {

    /**
     * Called when the Android device started connecting to given device.
     * The [.onDeviceConnected] will be called when the device is connected,
     * or [.onError] in case of error.
     *
     * @param device the device that got connected.
     */
    fun onDeviceConnecting(device: BluetoothDevice)

    /**
     * Called when the device has been connected. This does not mean that the application may start
     * communication.
     * A service discovery will be handled automatically after this call. Service discovery
     * may ends up with calling [.onServicesDiscovered] or
     * [.onDeviceNotSupported] if required services have not been found.
     *
     * @param device the device that got connected.
     */
    fun onDeviceConnected(device: BluetoothDevice)

    /**
     * Called when user initialized disconnection.
     *
     * @param device the device that gets disconnecting.
     */
    fun onDeviceDisconnecting(device: BluetoothDevice)

    /**
     * Called when the device has disconnected (when the callback returned
     * [BluetoothGattCallback.onConnectionStateChange] with state
     * DISCONNECTED), but ONLY if the [BleManager.shouldAutoConnect] method returned false
     * for this device when it was connecting.
     * Otherwise the [.onLinkLossOccurred] method will be called instead.
     *
     * @param device the device that got disconnected.
     */
    fun onDeviceDisconnected(device: BluetoothDevice)

    /**
     * This callback is invoked when the Ble Manager lost connection to a device that has been
     * connected with autoConnect option (see [BleManager.shouldAutoConnect].
     * Otherwise a [.onDeviceDisconnected] method will be called on such
     * event.
     *
     * @param device the device that got disconnected due to a link loss.
     */
    fun onLinkLossOccurred(device: BluetoothDevice)

    /**
     * Called when service discovery has finished and primary services has been found.
     * This method is not called if the primary, mandatory services were not found during service
     * discovery. For example in the Blood Pressure Monitor, a Blood Pressure service is a
     * primary service and Intermediate Cuff Pressure service is a optional secondary service.
     * Existence of battery service is not notified by this call.
     *
     *
     * After successful service discovery the service will initialize all services.
     * The [.onDeviceReady] method will be called when the initialization
     * is complete.
     *
     * @param device                the device which services got disconnected.
     * @param optionalServicesFound if `true` the secondary services were also found
     * on the device.
     */
    fun onServicesDiscovered(device: BluetoothDevice, optionalServicesFound: Boolean)

    /**
     * Method called when all initialization requests has been completed.
     *
     * @param device the device that get ready.
     */
    fun onDeviceReady(device: BluetoothDevice)

    /**
     * This method should return true if Battery Level notifications should be enabled on the
     * target device. If there is no Battery Service, or the Battery Level characteristic does
     * not have NOTIFY property, this method will not be called for this device.
     *
     *
     * This method may return true only if an activity is bound to the service (to display the
     * information to the user), always (e.g. if critical battery level is reported using
     * notifications) or never, if such information is not important or the manager wants to
     * control Battery Level notifications on its own.
     *
     * @param device the target device.
     * @return True to enabled battery level notifications after connecting to the device,
     * false otherwise.
     */
    @Deprecated(
        "Use\n" +
                "      <pre>{@code\n" +
                "     * setNotificationCallback(batteryLevelCharacteristic)\n" +
                "     *       .with(new BatteryLevelDataCallback() {\n" +
                "     *           onBatteryLevelChanged(int batteryLevel) {\n" +
                "     *                ...\n" +
                "     *           }\n" +
                "     *       });\n" +
                "     * }</pre>\n" +
                "      in the {@link BleManager.BleManagerGattCallback#initialize() initialize(BluetoothDevice)}\n" +
                "      instead."
    )
    fun shouldEnableBatteryLevelNotifications(device: BluetoothDevice): Boolean {
        return false
    }

    /**
     * Called when battery value has been received from the device.
     *
     * @param device the device from which the battery value has changed.
     * @param value  the battery value in percent.
     */
    @Deprecated(
        "Use\n" +
                "      <pre>{@code\n" +
                "     * setNotificationCallback(batteryLevelCharacteristic)\n" +
                "     *       .with(new BatteryLevelDataCallback() {\n" +
                "     *           onBatteryLevelChanged(int batteryLevel) {\n" +
                "     *                ...\n" +
                "     *           }\n" +
                "     *       });\n" +
                "     * }</pre>\n" +
                "      in the {@link BleManager.BleManagerGattCallback#initialize() initialize(BluetoothDevice)}\n" +
                "      instead."
    )
    fun onBatteryValueReceived(
        device: BluetoothDevice,
        @IntRange(from = 0, to = 100) value: Int
    ) {
        // do nothing
    }

    /**
     * Called when an [BluetoothGatt.GATT_INSUFFICIENT_AUTHENTICATION] error occurred and the
     * device bond state is [BluetoothDevice.BOND_NONE].
     *
     * @param device the device that requires bonding.
     */
    fun onBondingRequired(device: BluetoothDevice)

    /**
     * Called when the device has been successfully bonded.
     *
     * @param device the device that got bonded.
     */
    fun onBonded(device: BluetoothDevice)

    /**
     * Called when the bond state has changed from [BluetoothDevice.BOND_BONDING] to
     * [BluetoothDevice.BOND_NONE].
     *
     * @param device the device that failed to bond.
     */
    fun onBondingFailed(device: BluetoothDevice)

    /**
     * Called when a BLE error has occurred
     *
     * @param message   the error message.
     * @param errorCode the error code.
     * @param device    the device that caused an error.
     */
    fun onError(
        device: BluetoothDevice,
        message: String, errorCode: Int
    )

    /**
     * Called when service discovery has finished but the main services were not found on the device.
     *
     * @param device the device that failed to connect due to lack of required services.
     */
    fun onDeviceNotSupported(device: BluetoothDevice)
}
